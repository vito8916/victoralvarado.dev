---
import { fade } from 'astro:transitions';
export interface Props {
    title: string;
    description: string;
    showContact?: boolean;
    slug?: string;
    tags?: string[];
}

const {title, description, showContact, slug, tags} = Astro.props;
let titles = title.split(" ");
const joinedTitles = titles.slice(0, -1).join(" ");
const lastTitle = titles[titles.length - 1];
---
<header class="container">
    <div class="header-author">
        <a href="/">
            {
                slug === undefined ? <h1> {joinedTitles} <span class="text-gradient">{lastTitle}</span></h1> :
                        <h1 transition:name={`title-${slug}`}> {joinedTitles} <span
                                class="text-gradient"> {lastTitle}</span></h1>
            }

        </a>
        <div>
            { slug ? <p transition:name={`description-${slug}`}>{description}</p> : <p>{description}</p> }
        </div>
    </div>
    {showContact &&
            <div class="header-contact">
                <hr class="header-contact-divider">
                <div class="c-grid">
                    <div class="c-content__body">
                        <h4 class="label">Location</h4>
                        <address>
                            Dublin, Ireland
                        </address>
                    </div>
                    <div class="c-content__body">
                        <h4>Linkedin</h4>
                        <a target="_blank" href="https://www.linkedin.com/in/victor-alvaradohn">@victor-hn</a>
                    </div>
                    <div class="c-content__body">
                        <h4>Email</h4>
                        <a href="mailto:victoralvarado.dev@gmail.com">victoralvarado.dev@gmail.com</a>
                    </div>
                </div>
            </div>
        }
    {showContact === false && tags &&
            <div class="tags" transition:animate={fade({ duration: '0.5s' })}>
                {
                    tags.map((tag) => (
                            <span class="tag">{tag}</span>
                    ))
                }
            </div>
    }
</header>

<style>
    header {
        width: 100%;
        margin-bottom: var(--spacing-xl);
        color: var(--color-text);
    }

    header .header-author {
        margin-bottom: var(--spacing);
    }

    header .header-author .text-gradient {
        color: #00a651;
        font-weight: 700;
    }

    .header-contact-divider {
        border: 0;
        border-top: 1px solid var(--color-text);
        margin: var(--spacing) 0;
    }

    header .header-contact .c-grid {
        display: grid;
        grid-gap: var(--spacing);
    }

    @media (min-width: 600px) {
        header .header-contact .c-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    .c-content__body h4 {
        margin-bottom: var(--spacing-s);
        margin-top: 0;
    }

    header h1 {
        font-size: 3rem;
        margin-bottom: 0;
        margin-top: 0;
    }

    header h1 span {
        font-size: 3rem;
    }

    header a {
        color: inherit;
        text-decoration: none;
    }

    header p {
        margin-bottom: 0;
        margin-top: 0;
    }

    .tags {
        overflow-x: scroll;
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .tags .tag {
        background-color: var(--color-primary);
        color: #fff;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 600;
    }
</style>